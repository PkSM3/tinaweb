// Generated by CoffeeScript 1.3.3

(function($) {
  $.fn.nap = function(data) {
    var defaults, fallAsleep, k, standByTime, v, wakeUp;
    defaults = {
      fallAsleep: function() {},
      wakeUp: function() {},
      standByTime: 10
    };
    for (k in data) {
      v = data[k];
      defaults[k] = v;
    }
    fallAsleep = defaults.fallAsleep;
    wakeUp = defaults.wakeUp;
    standByTime = defaults.standByTime;
    if (typeof standByTime === "number" && standByTime > 0) {
      $.fn.nap.standByTime = standByTime;
      if ($.fn.nap.readySetGo) {
        $.fn.nap.pressSnooze();
      }
    }
    if (!$.fn.nap.readySetGo) {
      $.fn.nap.readySetGo = true;
      $(window).mousemove(function() {
        return $.fn.nap.interaction();
      });
      $(window).keyup(function() {
        return $.fn.nap.interaction();
      });
      $(window).mousedown(function() {
        return $.fn.nap.interaction();
      });
      $(window).scroll(function() {
        return $.fn.nap.interaction();
      });
      $.fn.nap.pressSnooze();
    }
    return this.each(function() {
      $.fn.nap.fallAsleepFunctions.push({
        func: fallAsleep,
        napr: $(this)
      });
      return $.fn.nap.wakeUpFunctions.push({
        func: wakeUp,
        napr: $(this)
      });
    });
  };
  $.fn.nap.standByTime = 60;
  $.fn.nap.isAwake = true;
  $.fn.nap.readySetGo = false;
  $.fn.nap.fallAsleepFunctions = new Array();
  $.fn.nap.wakeUpFunctions = new Array();
  $.fn.nap.fallAsleep = function() {
    $.fn.nap.isAwake = false;
    clearInterval($.fn.nap.alarmClock);
    return $.fn.nap.callFunctions($.fn.nap.fallAsleepFunctions);
  };
  $.fn.nap.wakeUp = function() {
    $.fn.nap.isAwake = true;
    return $.fn.nap.callFunctions($.fn.nap.wakeUpFunctions);
  };
  $.fn.nap.pressSnooze = function() {
    clearInterval($.fn.nap.alarmClock);
    return $.fn.nap.alarmClock = delay($.fn.nap.standByTime * 1000, function() {
      return $.fn.nap.fallAsleep();
    });
  };
  $.fn.nap.interaction = function() {
    if (!$.fn.nap.isAwake) {
      $.fn.nap.wakeUp();
    }
    return $.fn.nap.pressSnooze();
  };
  return $.fn.nap.callFunctions = function(f) {
    var i, z, _results;
    _results = [];
    for (i in f) {
      switch (typeof f[i].func) {
        case "function":
          _results.push(f[i].func());
          break;
        case "string":
          if (f[i].func.length > 0) {
            _results.push(f[i].napr.trigger(f[i].func));
          } else {
            _results.push(void 0);
          }
          break;
        case "object":
          _results.push((function() {
            var _results1;
            _results1 = [];
            for (z in f[i].func) {
              _results1.push(f[i].napr.trigger(f[i].func[z]));
            }
            return _results1;
          })());
          break;
        default:
          _results.push(void 0);
      }
    }
    return _results;
  };
})(jQuery);
